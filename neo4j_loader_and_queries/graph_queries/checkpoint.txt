//
// Assert patterns to look for
//
MATCH

// First, search for the ring pattern. I.e., begin and end at the same molecule,
// with an arbitrary number (*) of hops. (The number of hops can be controlled below
// with length(ringPath) filter.)
ringPath=(beginMol:Molecule)-[ringRel:FORMS*]->(beginMol:Molecule),

// Next, collect any molecule attached to ring pattern above, limited to 1 hop.
// This attachment consists of a feeder and consumer molecule, where the molecule in the ring
// is the intermediate molecule. The feeder molecule what drives the cycle to begin.
attachedPath=(feederMol:Molecule)-[attachedRel:FORMS]->(intermediateMol:Molecule)-[:FORMS]->(consumerMol:Molecule),

// Next, collect the molecule that is consuming beginMol.
// This makes the loop more likely to be a useful autocatalytic cycle.
branchedBeginMolPath=(beginMol:Molecule)-[consumerRel:FORMS]->(beginMolConsumer:Molecule),


checkIncomingAndOutgoingRelsCountPath = (intermediateMol)-[checkCountRel]-()

// DEFINE SOME VARIABLES
//UNWIND DISTINCT NODES(ringPath) as num_mols_in_ring
//FOREACH (n IN NODES(ringPath)|
//MATCH (n)-[r]-()
//WHERE COUNT(r) <= length(ringPath)
//)

WITH DISTINCT NODES(ringPath) AS ringPathDistinct, ringPath, beginMol, attachedPath, feederMol, intermediateMol, consumerMol, branchedBeginMolPath, beginMolConsumer, ringRel, attachedRel, consumerRel, size(ringRel) as num_rels_in_ring, checkIncomingAndOutgoingRelsCountPath, count(checkCountRel) as checkCount

WITH size(ringPathDistinct) AS num_distinct_mols_in_ring, ringPath, beginMol, attachedPath, feederMol, intermediateMol, consumerMol, branchedBeginMolPath, beginMolConsumer, ringRel, attachedRel, consumerRel, size(ringRel) as num_rels_in_ring, checkIncomingAndOutgoingRelsCountPath, checkCount

//
// Set some filter conditions
//


// The feeder and consumer molecule shouldn't be in the ringPath.
WHERE NOT feederMol IN NODES(ringPath)
AND NOT consumerMol IN NODES(ringPath)
AND NOT beginMolConsumer IN NODES(ringPath)
AND beginMol <> beginMolConsumer

// The intermediate molecule in the attachedPath must be in the ringPath.
AND intermediateMol IN NODES(ringPath)

// The feeder molecule in the attachedPath can't be the same as the consumer molecule.
AND feederMol <> consumerMol

// assert that ring must travel in same direction (no flipping directions in the middle of the ring)
AND NOT (beginMol:Molecule)-[:FORMS]->(beginMol:Molecule)<-[:FORMS]-(beginMol:Molecule)



AND NOT checkCount > 5

// Assert that the number of relationships in the ring must equal the number of nodes in the ring.
// This will prevent constriction points in the ring, i.e. prevent the path from traveling over the same
// molecule twice. Length(ringPath) returns the number of relationships in the ring path, and
// size(nodes(ringPath)) returns the count of nodes. The count of nodes is 1 higher than the unique
// node count in the ring because the ringPath counts the beginMol twice.
//AND length(ringPath) + 1 = size(NODES(ringPath))
//AND length(ringPath) + 1 = count(distinct nodes(ringPath))
// AND length(ringPath) + 1 = num_mols_in_ring
//AND COUNT(NODES(ringPath))
//AND size(NODES(ringPath)) = size(ringRel) + 1
//AND size(NODES(ringPath)) = size(ringRel)

// only filter for rings of a certain count of molecules in the ringPath
// need to add 1 to whatever count of molecules you're looking for in the ringPath
// because beginMol is counted twice
//AND size(NODES(ringPath)) = 7
//AND size(ringRel) = 6

// control the generation at which the feeder molecule is formed
// (this means that the cycle begins operating at or after the generation)
// AND feederMol.generation_formed = 3




//
// Finally, return a limited number of distinct patterns that match the query
//
// RETURN length(ringPath) as len_ring_path, size(NODES(ringPath)) as num_nodes_ring_path
//RETURN ringPath, length(ringPath), size(NODES(ringPath))
//RETURN ringPath, size(ringPath)
RETURN *
LIMIT 1

// Or, return the size of the longest ring
// RETURN max(nodes(ringPath))