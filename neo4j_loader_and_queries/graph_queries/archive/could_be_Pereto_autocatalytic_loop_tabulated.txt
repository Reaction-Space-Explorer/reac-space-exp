MATCH

// search for ring patterns
ringPath=(beginMol:Molecule)-[:FORMS*]->(beginMol:Molecule),

// also collect any molecule attached to ring pattern above, limited to 1 hop
attachedPath=(feederMol:Molecule)-[:FORMS]->(intermediateMol:Molecule)-[:FORMS]->(consumerMol:Molecule),

// also collect the molecule that the beginMol is consuming (this makes the loop more likely to be a useful autocatalytic cycle)
branchedBeginMolPath=(beginMol:Molecule)-[:FORMS]->(beginMolConsumer:Molecule)

// set some filter conditions, i.e. the feeder molecule in the attachedPath can't be the same as the consumer molecule
WHERE NOT feederMol IN NODES(ringPath)
AND NOT consumerMol IN NODES(ringPath)
AND intermediateMol IN NODES(ringPath)
AND feederMol <> consumerMol

//AND length(ringPath) >= 3
//AND beginMol <> molInRing
//AND beginMol.generation_formed = 1

// return nodes & rels that match the query
RETURN DISTINCT

// extract info from ring path
EXTRACT(n in NODES(ringPath)|n.smiles_str) AS ringPaths,
EXTRACT(n in NODES(ringPath)|n.generation_formed) AS ringPathsGeneration,
length(ringPath),

// extract info from feeder/consumer mols
EXTRACT(n in NODES(attachedPath)|n.smiles_str) AS attachedPaths,
EXTRACT(n in NODES(attachedPath)|n.generation_formed) AS attachedPathsGeneration

LIMIT 10