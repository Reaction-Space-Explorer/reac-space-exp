MATCH ringPath=(beginMol:Molecule)-[:FORMS*1..6]->(beginMol:Molecule),
branchedBeginMolPath=(beginMol:Molecule)-[:FORMS]->(beginMolConsumer:Molecule),
attachedPath=(feederMol:Molecule)-[:FORMS]->(intermediateMol:Molecule)-[:FORMS]->(consumerMol:Molecule)
UNWIND nodes(ringPath) as ringMol
//UNWIND nodes(attachedPath) as attachedMol
WITH collect(distinct ringMol.smiles_str) AS ringMols, ringPath, relationships(ringPath) as ringRels, beginMol, beginMolConsumer, branchedBeginMolPath, attachedPath, feederMol, intermediateMol, consumerMol //, collect(distinct attachedMol.smiles_str) AS attachedMols
//WITH ringPath, relationships(ringPath) as ringRels, collect(distinct nodes(ringPath)) as ringMols, size(relationships(ringPath)) as num_rels_in_ring, size(collect(distinct nodes(ringPath.smiles_str))) as num_mols_in_ring
//WHERE num_rels_in_ring > 4
WHERE size(ringMols) > 4
AND size(ringRels) = size(ringMols)
AND beginMol <> beginMolConsumer
AND NOT beginMolConsumer.smiles_str IN ringMols
AND beginMolConsumer <> feederMol
AND beginMol <> feederMol
AND feederMol <> consumerMol
AND beginMol <> consumerMol
AND NOT feederMol.smiles_str IN ringMols
AND NOT consumerMol.smiles_str IN ringMols
//AND beginMolConsumer <> consumerMol

//AND NOT (beginMol:Molecule)-[:FORMS]->(beginMol:Molecule)<-[:FORMS]-(beginMol:Molecule)



//AND NOT beginMolConsumer.smiles_str IN attachedMols


//AND intermediateMol.smiles_str IN ringMols
//AND NOT feederMol.smiles_str IN ringMols
//AND NOT consumerMol.smiles_str IN ringMols
//AND feederMol <> consumerMol

RETURN *
LIMIT 1