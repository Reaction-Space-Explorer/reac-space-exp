from rmgpy.rmg.main import RMG
from rdkit import Chem
from rmgpy.species import Species
from rmgpy.solver.simple import SimpleReactor
import networkx as nx
import matplotlib
# This line below is needed when trying to print matplotlib's figures in PyCharm
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
from generate_input import generate_new_input

"""
Testing RMG features basically
"""

print('Hello! This is a test.')

gen_count = 0
# Total generations (includes the zeroth (initial) generation)
total_gens = 2

# I had to keep track of new species generated each generation
# This list is expanded each successive generation
old_species_labels = ['HCN', 'glucose', 'glycine']

# I will update the instance of the rmgpy.main.RMG every generation
# and use it to fetch the list of reactants, etc. in the end
my_rmg = None

# TODO: Find a fix for the forbidden structure exceptions

while gen_count < total_gens:
    # The input has to be in the form of an RMG "job" file
    # Refer to the doc for details
    file_path = f'input_{gen_count}.py'

    print('Starting generation ' + str(gen_count))

    # an instance of the RMG API
    rmg_instance = RMG(input_file=file_path)
    rmg_instance.execute()
    my_rmg = rmg_instance

    print('Generating input file for next generation')
    # The list of species gets significantly large when edge speices are included
    generate_new_input(file_path, f'input_{gen_count+1}.py', my_rmg.reaction_model,
                       old_species_labels, include_edge=True)
    # update the list
    old_species = my_rmg.reaction_model.core.species + my_rmg.reaction_model.edge.species
    gen_count += 1

network_graph = nx.DiGraph()

# create a list of species and reactions for this generation
# Don't forget to unpack the species and reactions lists before adding them into a single list
species_list = [*my_rmg.reaction_model.core.species, *my_rmg.reaction_model.edge.species]
reactions_list = [*my_rmg.reaction_model.core.reactions, *my_rmg.reaction_model.edge.reactions]

f = open('reactions_list.txt', 'w')
for reac in reactions_list:
    try:
        for reactant, product in reac.pairs:
            f.write(str(reac.index) + ': ' + reactant.label + ' -> ' + product.label + '\n')
    except(ValueError):
        pass
f.close()


def generate_network(species, reactions):
    for sp in species:
        # You can pass the entire Species object too (which has a lot of info)
        # Each species has a unique index integer id during an individual run
        # I passed sp.index for the sake of labels in the graph
        network_graph.add_node(sp.index)
    for reaction in reactions:
        try:
            for reactant, product in reaction.pairs:
                if reaction.is_forward:
                    network_graph.add_edge(reactant.index, product.index)
                else:
                    network_graph.add_edge(product.index, reactant.index)
        except(ValueError):
            # Sometimes it can't find reactant-product pairs, so just let those cases slide
            pass
    # once we're done adding nodes and edges to the graph
    # disable with_labels when passing the entire Species object (which turns into a huge string)
    nx.draw(network_graph, with_labels=True, arrows=True)
    # plt.savefig('glycine-hcn.png')
    plt.show()


#generate_network(species_list, reactions_list)

# TODO: find a way to access networks generated by RMG
# as of now it prints an empty list.
#print('Printing list of networks')
#print(my_rmg.reaction_model.network_list)

## I was trying something here
## The code throws an exception no matter how hard you try
## The methods require RMG#execute() in one way or the other

# read the SDF containing glucose and glycine
# sd_supp = Chem.SDMolSupplier('../data/test_1.sdf')
# for reactant in sd_supp: # Work with only one reactant from the list for now
#    print(Chem.MolToSmiles(reactant))
# reactant_2 = Chem.SDMolSupplier('HCN.sdf')[0] # HCN is the second reactant

# Create an RMG Species object from a smiles string corresponding to
# the reactant
# sp1 = Species(smiles=Chem.MolToSmiles(reactant_1))
# sp2 = Species(smiles=Chem.MolToSmiles(reactant_2))

# my_rmg.load_database()
# performs the reaction
# rxns = reac.react_species((reactant_1, reactant_2))
# print(rxns)
# reactor = SimpleReactor(T=(800,'K'), P = (1e0,'bar'), initial_mole_fractions={'glucose':0.5, 'HCN':0.5})
